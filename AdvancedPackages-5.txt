//Difficult C Program on advanced concepts.
#include <limits.h> 
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
int minDistance(int dist[], bool sptSet[],int n) 
{ 
   int min = INT_MAX, min_index,v;

   for ( v = 0; v < n; v++) 
       if (sptSet[v] == false && dist[v] <= min) 
           min = dist[v], min_index = v; 
   return min_index; 
} 
int dijkstra(int **graph,int **req_arr, int src,int dest,int n) 
{ 
   if(req_arr[src][dest-1]!=-1)
   return req_arr[src][dest-1];
   else{
   int dist[n],i,count;
   bool sptSet[n]; 
   for ( i = 0; i < n; i++) 
       dist[i] = INT_MAX, sptSet[i] = false; 
   dist[src] = 0; 
   for (count = 0; count < n - 1; count++) { 
       int u = minDistance(dist, sptSet,n); 
       sptSet[u] = true; 
       int v;
       for ( v = 0; v < n; v++) 
           if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) 
               dist[v] = dist[u] + graph[u][v]; 
   } 
   int v;
   for( v=0;v<n;v++){
       req_arr[src][v]=dist[v];
       req_arr[v][src]=dist[v];
   }
   return dist[dest-1];}
}
int main() { 
   int t;
   scanf("%d",&t);
   while(t-->0){
       int n,m,u,v,w,l ,count=2,i;
       scanf("%d %d %d",&n,&m,&l);
       int**grid=(int**)malloc(n*sizeof(int**));
       int**req_arr=(int**)malloc(n*sizeof(int**));
       int *cities=(int*)malloc(l*sizeof(int));
       for(i=0;i<n;i++){
           grid[i]=(int*)calloc(n,sizeof(int));
           req_arr[i]=(int*)malloc(n*sizeof(int));
           for(u=0;u<n;u++)
           req_arr[i][u]=-1;
       }
       for(i=0;i<l;i++)
           scanf("%d",&cities[i]);
       for(i=0;i<m;i++){
           scanf("%d %d %d",&u,&v,&w);
           grid[u-1][v-1]=w;
           grid[v-1][u-1]=w;
       }
       int y=0;
       for(i=0;i<l-1;i++){
          if(grid[cities[i]-1][cities[i+1]-1]!=dijkstra(grid,req_arr,cities[i]-1,cities[i+1],n))
          {
              y=1;
              printf("-1\n");
              break;
          }   
       }
       if(y==1)
           continue;
       int length_taken = grid[cities[0]-1][cities[1]-1], ak=cities[0];
        if(l>2)
        {
           for(i=1;i<l-1;i++)
           {
               int supposed_path=dijkstra(grid,req_arr,ak-1,cities[i+1],n);
               length_taken+=grid[cities[i]-1][cities[i+1]-1];
               if(supposed_path!=length_taken)
                   count++;
                   ak=cities[i];
                   length_taken=grid[cities[i]-1][cities[i+1]-1];
           }
        }
        printf("%d\n",count);
   }
   return 0;
}